"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[991],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,h=m["".concat(i,".").concat(d)]||m[d]||p[d]||s;return r?n.createElement(h,a(a({ref:t},u),{},{components:r})):n.createElement(h,a({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,a=new Array(s);a[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<s;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9610:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var n=r(3117),o=r(102),s=(r(7294),r(3905)),a=["components"],c={},i=void 0,l={unversionedId:"commands/rhoas_cluster",id:"commands/rhoas_cluster",title:"rhoas_cluster",description:"rhoas cluster",source:"@site/../docs/commands/rhoas_cluster.md",sourceDirName:"commands",slug:"/commands/rhoas_cluster",permalink:"/commands/rhoas_cluster",editUrl:"https://github.com/redhat-developer/app-services-cli/../docs/commands/rhoas_cluster.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"rhoas",permalink:"/commands/rhoas"},next:{title:"rhoas_cluster_bind",permalink:"/commands/rhoas_cluster_bind"}},u=[{value:"rhoas cluster",id:"rhoas-cluster",children:[{value:"Synopsis",id:"synopsis",children:[],level:3},{value:"Examples",id:"examples",children:[],level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",children:[],level:3},{value:"SEE ALSO",id:"see-also",children:[],level:3}],level:2}],p={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"rhoas-cluster"},"rhoas cluster"),(0,s.kt)("p",null,"View and perform operations on your Kubernetes or OpenShift cluster"),(0,s.kt)("h3",{id:"synopsis"},"Synopsis"),(0,s.kt)("p",null,"Connect and bind your services to Kubernetes or OpenShift applications. You can also check if the Kubernetes or OpenShift cluster has the required Operators to perform this operation."),(0,s.kt)("h3",{id:"examples"},"Examples"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"# Check the status of the connection to your cluster\n$ rhoas cluster status\n\n# Connect to cluster without including currently selected services\n$ rhoas cluster connect --ignore-context\n\n# Connect to cluster using the specified token\n$ rhoas cluster connect --token=value\n\n# Connect to cluster and save script to create service binding\n$ rhoas cluster connect --yes > create_service_binding.sh\n\n# Connect managed service with your application\n$ rhoas cluster bind\n\n")),(0,s.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"  -h, --help      Show help for a command\n  -v, --verbose   Enable verbose mode\n")),(0,s.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/commands/rhoas"},"rhoas"),"\t - RHOAS CLI"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/commands/rhoas_cluster_bind"},"rhoas cluster bind"),"\t - Connect your RHOAS services to Kubernetes or OpenShift applications"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/commands/rhoas_cluster_clean"},"rhoas cluster clean"),"\t - Remove all resources created by cluster extensions"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/commands/rhoas_cluster_connect"},"rhoas cluster connect"),"\t - Connect your services to Kubernetes or OpenShift"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/commands/rhoas_cluster_status"},"rhoas cluster status"),"\t - View the status of the current Kubernetes or OpenShift cluster")))}m.isMDXComponent=!0}}]);