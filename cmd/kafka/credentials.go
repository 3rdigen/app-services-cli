package kafka

import (
	"fmt"
	"io/ioutil"

	"github.com/golang/glog"
	"github.com/spf13/cobra"
	"gitlab.cee.redhat.com/mas-dx/rhmas/cmd/flags"
)

const (
	FlagOutputFormat = "output"
)

// NewGetCommand gets a new command for getting kafkas.
func NewCredentialsCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "credentials",
		Short: "Generate credentials to connect to your cluster",
		Long:  "Generate credentials to connect your application to kafka cluster",
		Run:   runCredentials,
	}
	cmd.Flags().String(FlagOutputFormat, "", "Format of the config (quarkus, properties, json")
	return cmd
}

func runCredentials(cmd *cobra.Command, _ []string) {
	format := flags.GetString(FlagOutputFormat, cmd.Flags())

	var propertyFormat string
	var fileName string

	if format == "" || format == "properties" {
		propertyFormat = `
		## Credentials for Kafka cluster: 'serviceapi' 
		user=wtrocki-kafka-service
		password=d0b8122f-8dfb-46b7-b68a-f5cc4e25d000
		`
		fileName = "kafka.properties"
	} else if format == "quarkus" {
		propertyFormat = `
		## Autogenerated by rhmas-cli 
		kafka.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="wtrocki-kafka-service" password="d237abba-d098-4e3c-8ee3-badd453d6245";
		kafka.sasl.mechanism=PLAIN
		kafka.security.protocol=SASL_SSL
		kafka.ssl.protocol=TLSv1.2
		`
		fileName = "kafka.properties"
	} else if format == "json" {
		propertyFormat = `{ "user":"wtrocki-kafka-service", "password":"d0b8122f-8dfb-46b7-b68a-f5cc4e25d000" }`
		fileName = "credentials.json"
	} else {
		glog.Fatalf("Invalid format", format)
	}

	dataToWrite := []byte(propertyFormat)
	err := ioutil.WriteFile(fileName, dataToWrite, 0644)
	if err != nil {
		fmt.Println("Error when saving file")
	} else {
		fmt.Println("Successfully written credentials into %", fileName)
	}
}
